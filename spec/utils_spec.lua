describe('Test tomoauto config library functions', function ()
  local utils

  setup(function ()
    utils = require('tomoauto.utils')
  end)

  teardown(function ()
    utils = nil
  end)

  --before_each(function ()
  --end)

  --after_each(function ()
  --end)

  describe('Should be able to check type.', function()
    it('Should error on non-string Type argument', function()
      assert.has.Error(function()
        local status, err = pcall(utils.check_type,'hello', {})
        if status then return status else error(err) end
      end)
    end)

    it('Should be able to check booleans', function()
      assert.is.True(utils.check_type(true, 'boolean'))
      assert.is.True(utils.check_type(false, 'boolean'))
      assert.is.False(utils.check_type('hello', 'boolean'))
      assert.is.False(utils.check_type(42, 'boolean'))
      assert.is.False(utils.check_type(nil, 'boolean'))
      assert.is.False(utils.check_type({}, 'boolean'))
      assert.is.False(utils.check_type(function() print('hi') end, 'boolean'))

      assert.is.True(utils.is_boolean(true))
      assert.is.True(utils.is_boolean(false))
      assert.is.False(utils.is_boolean('hello'))
      assert.is.False(utils.is_boolean(42))
      assert.is.False(utils.is_boolean(nil))
      assert.is.False(utils.is_boolean({}))
      assert.is.False(utils.is_boolean(function() print('hi') end))
    end)

    it('Should be able to check functions', function()
      assert.is.True(utils.check_type(function() print('hi') end, 'function'))
      assert.is.False(utils.check_type(true, 'function'))
      assert.is.False(utils.check_type(false, 'function'))
      assert.is.False(utils.check_type('hello', 'function'))
      assert.is.False(utils.check_type(42, 'function'))
      assert.is.False(utils.check_type(nil, 'function'))
      assert.is.False(utils.check_type({}, 'function'))

      assert.is.True(utils.is_function(function() print('hi') end))
      assert.is.False(utils.is_function(true))
      assert.is.False(utils.is_function(false))
      assert.is.False(utils.is_function('hello'))
      assert.is.False(utils.is_function(42))
      assert.is.False(utils.is_function(nil))
      assert.is.False(utils.is_function({}))
    end)

    it('Should be able to check nil', function()
      assert.is.True(utils.check_type(nil, 'nil'))
      assert.is.False(utils.check_type(function() print('hi') end, 'nil'))
      assert.is.False(utils.check_type(true, 'nil'))
      assert.is.False(utils.check_type(false, 'nil'))
      assert.is.False(utils.check_type('hello', 'nil'))
      assert.is.False(utils.check_type(42, 'nil'))
      assert.is.False(utils.check_type({}, 'nil'))
      
      assert.is.True(utils.is_nil(nil))
      assert.is.False(utils.is_nil(function() print('hi') end))
      assert.is.False(utils.is_nil(true))
      assert.is.False(utils.is_nil(false))
      assert.is.False(utils.is_nil('hello'))
      assert.is.False(utils.is_nil(42))
      assert.is.False(utils.is_nil({}))
    end)

    it('Should be able to check number', function()
      assert.is.True(utils.check_type(42, 'number'))
      assert.is.False(utils.check_type(nil, 'number'))
      assert.is.False(utils.check_type(function() print('hi') end, 'number'))
      assert.is.False(utils.check_type(true, 'number'))
      assert.is.False(utils.check_type(false, 'number'))
      assert.is.False(utils.check_type('hello', 'number'))
      assert.is.False(utils.check_type({}, 'number'))
      
      assert.is.True(utils.is_number(42))
      assert.is.False(utils.is_number(nil))
      assert.is.False(utils.is_number(function() print('hi') end))
      assert.is.False(utils.is_number(true))
      assert.is.False(utils.is_number(false))
      assert.is.False(utils.is_number('hello'))
      assert.is.False(utils.is_number({}))
    end)

    it('Should be able to check string', function()
      assert.is.True(utils.check_type('hello', 'string'))
      assert.is.False(utils.check_type(42, 'string'))
      assert.is.False(utils.check_type(nil, 'string'))
      assert.is.False(utils.check_type(function() print('hi') end, 'string'))
      assert.is.False(utils.check_type(true, 'string'))
      assert.is.False(utils.check_type(false, 'string'))
      assert.is.False(utils.check_type({}, 'string'))
      
      assert.is.True(utils.is_string('hello'))
      assert.is.False(utils.is_string(42))
      assert.is.False(utils.is_string(nil))
      assert.is.False(utils.is_string(function() print('hi') end))
      assert.is.False(utils.is_string(true))
      assert.is.False(utils.is_string(false))
      assert.is.False(utils.is_string({}))
    end)
      
    it('Should be able to check table', function()
      assert.is.True(utils.check_type({}, 'table'))
      assert.is.False(utils.check_type('hello', 'table'))
      assert.is.False(utils.check_type(42, 'table'))
      assert.is.False(utils.check_type(nil, 'table'))
      assert.is.False(utils.check_type(function() print('hi') end, 'table'))
      assert.is.False(utils.check_type(true, 'table'))
      assert.is.False(utils.check_type(false, 'table'))
      
      assert.is.True(utils.is_table({}))
      assert.is.False(utils.is_table('hello'))
      assert.is.False(utils.is_table(42))
      assert.is.False(utils.is_table(nil))
      assert.is.False(utils.is_table(function() print('hi') end))
      assert.is.False(utils.is_table(true))
      assert.is.False(utils.is_table(false))
    end)

    --TODO We should check thread and userdata type, but neither is currently in
    -- tomoauto so leaving it out for now. DRM: 06/11/2015
  end)

  describe('It should correctly check filesystem paths using lfs.', function()

  end)
end)
