#!/usr/bin/env talua
--- Imitates median filter along beam axis.
-- This program imitates the 'image thickness' feature in the slicer window of
-- 3dmod. It takes N slices and projects them into an average and then
-- reassembles the averages back into a volume.
--
-- Dependencies: `MRC_IO_lib`
--
-- @script dose_fractioned_to_stack
-- @author Dustin Morado
-- @license GPLv3
-- @release 0.2.10

local MRC_IO_lib = require 'MRC_IO_lib'

local function get_indices(section, number_of_sections, filter_size)
    local is_even = (filter_size % 2 == 0) and true or false
    local indices = {}
    local shift = 0

    if is_even then
        if section < number_of_sections / 2 then
            indices[1] = section - ((filter_size / 2) - 1)
            indices[2] = section + (filter_size / 2)
            if indicies[1] < 1 then
                shift = 1 - indices[1]
                indices[1] = indices[1] + shift
                indices[2] = indices[2] + shift
            end
        else
            indices[1] = section - (filter_size / 2)
            indices[2] = section + ((filter_size / 2) - 1)
            if indices[2] > number_of_sections then
                shift = indices[2] - number_of_sections
                indices[1] = indices[1] - shift
                indices[2] = indices[2] - shift
            end
        end
    else
        indices[1] = section - math.floor(filter_size / 2)
        indices[2] = section + math.floor(filter_size / 2)
        if indices[1] < 1 then
            shift = 1 - indices[1]
            indices[1] = indices[1] + shift
            indices[2] = indices[2] + shift
        elseif indices[2] > number_of_sections then
            shift = indices[2] - number_of_sections
            indices[1] = indices[1] - shift
            indices[2] = indices[2] - shift
        end
    end
    return indices
end

--- Imitates median filter along beam axis.
-- Takes N slices and projects them into an average and then reassembles the
-- averages into a new stack.
-- @param input_filename Input image stack e.g. 'image.rec'
-- @param filter_size Number of slices to average together e.g. 7
function median_filter(input_filename, filter_size)
    local median_filtered_filename = input_filename .. '.med' .. filter_size
    local input_filelist_name = input_filename .. '_list.txt'
    local input_filelist = assert(io.open(input_filelist_name, 'w'))
    filter_size = tonumber(filter_size)

    local header = MRC_IO_lib.get_header(input_filename)
    local nz = header.nz
    local is_even = (filter_size % 2 == 0) and true or false

    header = nil

    input_filelist:write(nz, '\n')
    for i = 1, nz do
        local average_filename = string.format('%s.avg_%04d', input_filename, i)
        input_filelist:write(string.format('%s\n0\n', average_filename))

        local indices = get_indices(i, nz, filter_size)

        local success, exit, signal = os.execute(string.format(
            'xyzproj -z "%d %d" -axis Y %s %s &> /dev/null', indices[1],
            indices[2], input_filename, average_filename))

        if not success or signal ~= 0 then
            os.execute(string.format('rm %s %s.avg_*', input_filelist_name,
                input_filename))

            error('\nError: median_filter xyzproj failed.\n\n')
        end
    end

    input_filelist:close()
    input_filelist = nil

    success, exit, signal = os.execute(string.format(
        'newstack -filei %s %s > /dev/null 2>&1', input_filelist_name,
        median_filtered_filename))

    if not success or signal ~= 0 then
        os.execute(string.format('rm %s %s.avg_* %s',
            input_filelist_name, input_filename, median_filtered_filename))

        error('\nError: median_filter newstack failed.\n\n')
    end

    success, exit, signal = os.execute(string.format(
        'rm -f %s %s.avg_*', input_filelist_name, input_filename))

    if not success or signal ~= 0 then
        error('\nError: median_filter cleanup failed.\n\n')
    end
end

if not arg[1] or not arg[2] then
    io.write('\nUsage: median_filter <image.rec> <filter_size>\n\n')
    os.exit(0)
end

local status, err = pcall(median_filter, arg[1], arg[2])
if not status then
    io.stderr:write(err)
    os.exit(1)
else
    os.exit(0)
end
-- vim: set ft=lua tw=80 ts=8 sts=2 sw=2 noet :
