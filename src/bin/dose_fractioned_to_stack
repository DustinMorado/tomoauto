#!/usr/bin/env talua
--[[
Copyright (c) 2015 Dustin Reed Morado

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

--- Make a tilt-series with proper header from motion-corrected micrographs.
--
-- MOTIONCORR currently destroys all of the header and extended-header data
-- included in dose-fractionated micrographs which makes it impossible to get
-- important information such as pixel size and tilt-axis rotation angle
-- automatically. This program takes the original tilt-series as produced by
-- SerialEM and the associated .mdoc or .log file and uses newstack to produce a
-- tilt-series from the motion-corrected micrographs. If MOTIONCORR has not
-- already been run on the raw subframes it can be executed here. Finally the
-- header information is set correctly in the new tilt-series and if a .mdoc
-- file was created for the original tilt-series an associated one is created
-- for the new tilt-series as well.
--
-- Dependencies: `tomoauto`, `yalgo`
--
-- @script dose_fractioned_to_stack
-- @author Dustin Morado
-- @license MIT
-- @release 0.2.30

local yalgo = require('yalgo')
local tomoauto = require('tomoauto')
local io, string, table = io, string, table

local parser = yalgo:new_parser('Make a tilt-series with proper header from ' ..
  'motion-corrected micrographs.')

-- Handle command-line arguments
parser:add_argument({
  name = 'input',
  is_positional = true,
  is_required = true,
  description = 'Input non motion corrected tilt-series from SerialEM',
  meta_value = 'INPUT.st'
})

parser:add_argument({
  name = 'output',
  is_positional = true,
  default_value = 'TOMOAUTO{basename}_driftcorr.st',
  description = 'Output motion corrected tilt-series',
  meta_value = 'OUTPUT.st'
})

parser:add_argument({
  name = 'run_motioncorr',
  long_option = '--MOTIONCORR',
  short_option = '-M',
  description = 'Run MOTIONCORR on non corrected sub-frames if needed',
})

parser:add_argument({
  name = 'local_config',
  long_option = '--local-config',
  short_option = '-L',
  has_argument = true,
  description = 'Use provided local configuration file.',
  meta_value = 'CONFIG_FILE'
})

local options = parser:get_arguments()

-- Error if input file does not exist
if not tomoauto.utils.is_file(options.input) then
  error('ERROR: dose_fractioned_to_stack: Input file does not exist.\n')
end

-- Create MRC object for the original SerialEM tilt-series
local input_mrc = tomoauto.mrcio:new_mrc(options.input)
local log_filename = input_mrc.basename .. '.log'

if not input_mrc.has_mdoc and not tomoauto.utils.is_file(log_filename) then
  error('ERROR: dose_fractioned_to_stack: No mdoc or log file to make stack.\n')
end

local timestamp_regex = '%u%l%l%d%d_%d%d%.%d%d%.%d%d%.mrc'
local subframes = {}

-- mdoc routine
if input_mrc.has_mdoc then
  local mdoc_file = io.open(input_mrc.mdoc_filename, 'r')
  for line in mdoc_file:lines('*l') do
    if string.match(line, 'ZValue') then
      table.insert(subframes, {})

    elseif string.match(line, 'TiltAngle') then
      local tilt_angle = string.match(line, 'TiltAngle = (-?%d+%.%d+)')
      subframes[#subframes][2] = tilt_angle

    elseif string.match(line, 'SubFramePath') then
      local subframe = string.match(line, timestamp_regex)
      subframes[#subframes][1] = subframe
    end
  end

else
  local log_file = io.open(log_filename, 'r')
  for line in log_file:lines('*l') do
    if string.match(line, 'Opened new file') then
      subframes = {}

    elseif string.match(line, '%d+ frames were saved') then
      local subframe = string.match(line, timestamp_regex)
      if #subframes ~= 0 and #subframes[#subframes] == 1 then
	subframes[#subframes][1] = subframe

      else
	table.insert(subframes, { subframe })
      end

    elseif string.match(line, 'Saved Z') then
      local tilt_angle = string.match(line, 'Tilt = (-?%d+%.%d+)')
      subframes[#subframes][2] = tilt_angle
    end
  end

  if #subframes ~= 0 and #subframes[#subframes] == 1 then
    table.remove(subframes)
  end
end

if #subframes == 0 then
  error('ERROR: dose_fractioned_to_stack: No subframes found in mdoc or log ' ..
	'file.\n')
end

table.sort(subframes, function (t1, t2) return t1[2] <= t2[2] end)
if options.run_motioncorr then
  for _, subframe in ipairs(subframes) do
    subframe_mrc = tomoauto.mrcio:new_mrc(subframe[1])
    if options.local_config then
      tomoauto.config:load_local_config(options.local_config)
    end

    tomoauto.config.MOTIONCORR:run(subframe_mrc)
    subframe_mrc = nil
  end
end

local driftcorr_subframes = {}
for _, subframe in ipairs(subframes)  do
  local driftcorr_subframe = tomoauto.utils.basename(subframe[1], '.mrc') ..
    '_driftcorr.mrc'

  if tomoauto.utils.is_file(driftcorr_subframe) then
    table.insert(driftcorr_subframes, { driftcorr_subframe, subframe[2] })

  else
    io.stderr:write('WARNING: dose_fractioned_to_stack: ' ..
      driftcorr_subframe .. ' does not exist.\n')

  end
end

local list_data = #driftcorr_subframes .. '\n'
for _, subframe in ipairs(driftcorr_subframes) do
  list_data = list_data .. subframe[1] .. '\n0\n'
end

local list_filename = input_mrc.basename .. '_filelist.txt'
local list_file = io.open(list_filename, 'w')
list_file:write(list_data)
list_file:close()
list_data = nil

local temp_filename = input_mrc.basename .. '_temp.st'
local newstack = {
  FileOfInputs = { use = true, value = list_filename },
  OutputFile = { use = true, value = temp_filename }
}

tomoauto.config.newstack:clear()
tomoauto.config.newstack:update(newstack)

if options.local_config then
  tomoauto.config:load_local_config(options.local_config)
end

tomoauto.config.newstack:run(input_mrc)
tomoauto.utils.run('rm ' .. list_filename)
tomoauto.utils.run('rm ' .. input_mrc.basename .. '_newstack.com')
tomoauto.utils.run('rm ' .. input_mrc.basename .. '_newstack.log')

temp_mrc = tomoauto.mrcio:new_mrc(temp_filename)
temp_mrc.header.mx = temp_mrc.header.nx
temp_mrc.header.my = temp_mrc.header.ny
temp_mrc.header.mz = temp_mrc.header.nz
temp_mrc.header.xlen = input_mrc.pixel_size_A * temp_mrc.header.mx
temp_mrc.header.ylen = input_mrc.pixel_size_A * temp_mrc.header.my
temp_mrc.header.zlen = input_mrc.pixel_size_A * temp_mrc.header.mz
temp_mrc.header.label_1 = input_mrc.header.label_1
temp_mrc.header.label_2 = input_mrc.header.label_2

-- vim: set ft=lua tw=80 ts=8 sts=2 sw=2 noet :
