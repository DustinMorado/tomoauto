#!/usr/bin/env lua
--[[===========================================================================#
#                                 write_header                                 #
#------------------------------------------------------------------------------#
# This is a program that lets you modify and rewrite the header of an MRC file #
# It should be used with care as it can easily disrupt how many EM-processing  #
# commands operate. If in doubt do not use this program. It was mainly written #
# to handle those too often occasions when another utilty erases the header or #
# extended header of a collected tilt-series.                                  #
#------------------------------------------------------------------------------#
# Author:  Dustin Morado                                                       #
# Written: June 5th 2014                                                       #
# Contact: Dustin.Morado@uth.tmc.edu                                           #
#------------------------------------------------------------------------------#
# Arguments: input_filename:  image stack filename <string>                    #
#            output_filename: output image stack filename <string>             #
#            options_table:   options as output by yago <table>                #
#===========================================================================--]]
local tomoauto_directory = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoauto_directory .. '/lib/?.lua;'
local MRC_IO_lib = require 'MRC_IO_lib'
local yago = require 'yago'
local short_options = 'a_, b_, c_, d_,   e_,      f_,      g_,      h,    i_, '
local long_options  = 'nx, ny, nz, mode, nxstart, nystart, nzstart, help, mx, '

short_options = short_opitons .. 'j_, k_, l_,   m_,   n_,   o_,   p_,   q_,    '
long_options  = long_options  .. 'my, mz  xlen, ylen, zlen, amin, amax, amean, '

short_options = short_options .. 'r_,      s_,      t_,      u_,   v_,   w_,   '
long_options  = long_options  .. 'cAngleX, cAngleY, cAnglez, xorg, yorg, zorg, '

short_options = short_options .. 'x_,  y_,       z_,         '
long_options  = long_options  .. 'rms, addlabel, labelIndex, '

short_options = short_options .. 'A_,         B_,           C_,      D_,      '
long_options  = long_options  .. 'startAngle, angleSpacing, defocus, expTime, '

short_options = short_options .. 'E_,       F_,      G_,  I_, J_,      '
long_options  = long_options  .. 'tiltAxis, pixSize, mag, ht, binning, '

short_options = short_options .. 'K_,         L_,        M_'
long_options  = long_options  .. 'appDefocus, intensity, expDose'

local status, arg, options_table = pcall(
   yago.get_options,
   arg,
   short_options,
   long_options
)
if not status then
   local err = arg
   io.stderr:write(err)
   return nil
end

if options_table.h then
   io.stdout:write('\nUsage: setHeader [OPTION..] InputFile OutputFile\n\n')
   io.stdout:write('--nx\t\t\tSet Image X dimension\n')
   io.stdout:write('--ny\t\t\tSet Image Y dimension\n')
   io.stdout:write('--nz\t\t\tSet Image Z dimension\n')
   io.stdout:write('--mode\t\t\tSet Image Data Mode\n')
   io.stdout:write('--nxstart\t\tSet Image X starting location\n')
   io.stdout:write('--nystart\t\tSet Image Y starting location\n')
   io.stdout:write('--nzstart\t\tSet Image Z starting location\n')
   io.stdout:write('--help\t\t\tPrint this help message and exit\n')
   io.stdout:write('--mx\t\t\tSet mx [X pixel spacing = xlen/mx\n')
   io.stdout:write('--my\t\t\tSet my [Y pixel spacing = ylen/my\n')
   io.stdout:write('--mz\t\t\tSet mz [Z pixel spacing = zlen/mz\n')
   io.stdout:write('--xlen\t\t\tSet xlen [See above]\n')
   io.stdout:write('--ylen\t\t\tSet ylen [See above]\n')
   io.stdout:write('--zlen\t\t\tSet zlen [See above]\n')
   io.stdout:write('--amin\t\t\tSet average minimum value\n')
   io.stdout:write('--amax\t\t\tSet average maximum value\n')
   io.stdout:write('--amean\t\t\tSet average mean value\n')
   io.stdout:write('--cAngleX\t\tSet current X angle rotation\n')
   io.stdout:write('--cAngleY\t\tSet current Y angle rotation\n')
   io.stdout:write('--cAngleZ\t\tSet current Z angle rotation\n')
   io.stdout:write('--xorg\t\t\tSet X origin value\n')
   io.stdout:write('--yorg\t\t\tSet Y origin value\n')
   io.stdout:write('--zorg\t\t\tSet Z origin value\n')
   io.stdout:write('--rms\t\t\tSet RMS value\n')
   io.stdout:write('--addlabel\t\tAdd a label to the header\n')
   io.stdout:write('--labelIndex\t\tAdd label to this number\n')
   io.stdout:write('--startAngle\t\tStart of tilt angles [e.g 60]\n')
   io.stdout:write('--angleSpacing\t\tSet increment of tilt angles\n')
   io.stdout:write('--defocus\t\tSet Image Defocus\n')
   io.stdout:write('--expTime\t\tSet Exposure Time\n')
   io.stdout:write('--tiltAxis\t\tSet tilt axis offset rotation angle\n')
   io.stdout:write('--pixSize\t\tSet Image Pixel Size\n')
   io.stdout:write('--mag\t\t\tSet Image Magnification\n')
   io.stdout:write('--ht\t\t\tSet High Tension Voltage\n')
   io.stdout:write('--binning\t\tSet Image Binning\n')
   io.stdout:write('--appDefocus\t\tSet Applied Defocus\n')
   io.stdout:write('--intensity\t\tSet intensity[IMOD]\n')
   io.stdout:write('--expDose\t\tSet Exposure Dose[IMOD]\n')
   return 0
else
   MRC_IO_lib.set_header(arg[1], arg[2], options_table)
end
