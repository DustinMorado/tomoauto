#!/usr/bin/env lua
local tomoAutoDir = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoAutoDir .. '/lib/?.lua;'
local MRCIOLib = require 'MRCIOLib'
local filename = arg[1]
local io = io

local function printHeader(filename)
   local H = MRCIOLib.getHeader(filename)
   io.stdout:write('\n\n')
   io.stdout:write(string.format('Image Filename:\t\t%s\n\n', filename))
   io.stdout:write(string.format(
      'Number of columns, rows, sections .............\t%d\t%d\t%d\n',
       H.nx, H.ny, H.nz))
   io.stdout:write(string.format(
      'Map mode ......................................\t%d\n',
       H.mode))
   io.stdout:write(string.format(
      'Image size lower bounds .......................\t%d\t%d\t%d\n',
       H.nxstart, H.nystart, H.nzstart))
   io.stdout:write(string.format(
      'Cell Pixel Spacing (Angstroms) ................\t%6.4f\t%6.4f\t%6.4f\n',
       H.xlen/H.mx, H.ylen/H.my, H.zlen/H.mz))
   io.stdout:write(string.format(
      'Cell Angles (degrees) .........................\t%5.2f\t%5.2f\t%5.2f\n',
       H.alpha, H.beta, H.gamma))
   local Axes = { 'X', 'Y', 'Z'}
   io.stdout:write(string.format(
      'Axis Mappings .................................\t%s\t%s\t%s\n',
       Axes[H.mapc], Axes[H.mapr], Axes[H.maps]))

	if H.mode ~= 2 then
	  io.stdout:write(string.format(
	     'Minimum density ...............................\t%d\n',
	      H.amin))

	  io.stdout:write(string.format(
	     'Maximum density ...............................\t%d\n',
	      H.amax))

	  io.stdout:write(string.format(
	     'Mean density ..................................\t%d\n',
	      H.amean))
	else
	  io.stdout:write(string.format(
	     'Minimum density ...............................\t%10.4f\n',
	      H.amin))

	  io.stdout:write(string.format(
	     'Maximum density ...............................\t%10.4f\n',
	      H.amax))

	  io.stdout:write(string.format(
	     'Mean density ..................................\t%10.4f\n',
	      H.amean))
	end

	io.stdout:write(string.format(
	  'Extra bytes after header until image data ....\t%d\n',
	   H.Next))

	io.stdout:write(string.format(
	  'Image header fields nd1, nd2, vd1, vd2 .......\t%d\t%d\t%d\t%d\n',
	   H.nd1, H.nd2, H.vd1, H.vd2))

	io.stdout:write(string.format(
	  'Image original tilt angles ...................\t%05.2f\t%05.2f\t%05.2f\n',
	   H.tiltAngles[1], H.tiltAngles[2], H.tiltAngles[3]))

	io.stdout:write(string.format(
	  'Image current tilt angles ....................\t%05.2f\t%05.2f\t%05.2f\n',
	   H.tiltAngles[4], H.tiltAngles[5], H.tiltAngles[6]))

	io.stdout:write(string.format(
	  'Origin of image ..............................\t%05.2f\t%05.2f\t%05.2f\n',
	   H.xorg, H.yorg, H.zorg))

	local mrcType = (H.imodStamp == 1146047817) and 'IMOD' or 'AGARD'
	io.stdout:write(string.format(
	  'MRC format ...................................\t%s\n',
	   mrcType))

	io.stdout:write(string.format(
	  'Number of labels in header ...................\t%d\n\n',
	   H.nlabl))

	for i = 1, H.nlabl do
	  io.stdout:write(string.format('Label %d: %s\n\n', i, H.labels[i]))
	end
   return 0
end

printHeader(filename)
