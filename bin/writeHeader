#!/usr/bin/env lua
local tomoAutoDir = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoAutoDir .. '/lib/?.lua;'
local MRCIOLib = require 'MRCIOLib'
local yago = require 'yago'
local sString = 'a_, b_, c_, d_,   e_,      f_,      g_,      h,    i_, j_, k_,'
local lString = 'nx, ny, nz, mode, nxstart, nystart, nzstart, help, mx, my, mz,'
sString = sString .. ' l_,   m_,   n_,   o_,   p_,   q_,    r_,      s_      '
lString = lString .. ' xlen, ylen, zlen, amin, amax, amean, cAngleX, cAngleY,'
sString = sString .. ' t_,      u_,   v_,   w_,   x_,  y_,      '
lString = lString .. ' cAnglez, xorg, yorg, zorg, rms, addlabel,'
sString = sString .. ' A_,         B_,           C_,      D_,      E_,      '
lString = lString .. ' startAngle, angleSpacing, defocus, expTime, tiltAxis,'
sString = sString .. ' F_,      G_,  I_, J_,      K_        '
lString = lString .. ' pixSize, mag, ht, binning, appDefocus'

local status, arg, Opts = pcall(yago.getOpt, arg, sString, lString)
if not status then
   local err = arg
   io.stderr:write(err)
   return 1
end

if Opts.h then
   io.stdout:write('\nUsage: setHeader [OPTION..] InputFile OutputFile\n\n')
   io.stdout:write('--nx\t\t\tSet Image X dimension\n')
   io.stdout:write('--ny\t\t\tSet Image Y dimension\n')
   io.stdout:write('--nz\t\t\tSet Image Z dimension\n')
   io.stdout:write('--mode\t\t\tSet Image Data Mode\n')
   io.stdout:write('--nxstart\t\tSet Image X starting location\n')
   io.stdout:write('--nystart\t\tSet Image Y starting location\n')
   io.stdout:write('--nzstart\t\tSet Image Z starting location\n')
   io.stdout:write('--help\t\t\tPrint this help message and exit\n')
   io.stdout:write('--mx\t\t\tSet mx [X pixel spacing = xlen/mx\n')
   io.stdout:write('--my\t\t\tSet my [Y pixel spacing = ylen/my\n')
   io.stdout:write('--mz\t\t\tSet mz [Z pixel spacing = zlen/mz\n')
   io.stdout:write('--xlen\t\t\tSet xlen [See above]\n')
   io.stdout:write('--ylen\t\t\tSet ylen [See above]\n')
   io.stdout:write('--zlen\t\t\tSet zlen [See above]\n')
   io.stdout:write('--amin\t\t\tSet average minimum value\n')
   io.stdout:write('--amax\t\t\tSet average maximum value\n')
   io.stdout:write('--amean\t\t\tSet average mean value\n')
   io.stdout:write('--cAngleX\t\tSet current X angle rotation\n')
   io.stdout:write('--cAngleY\t\tSet current Y angle rotation\n')
   io.stdout:write('--cAngleZ\t\tSet current Z angle rotation\n')
   io.stdout:write('--xorg\t\t\tSet X origin value\n')
   io.stdout:write('--yorg\t\t\tSet Y origin value\n')
   io.stdout:write('--zorg\t\t\tSet Z origin value\n')
   io.stdout:write('--rms\t\t\tSet RMS value\n')
   io.stdout:write('--addlabel\t\tAdd a label to the header\n')
   io.stdout:write('--startAngle\t\tStart of tilt angles [e.g 60]\n')
   io.stdout:write('--angleSpacing\t\tSet increment of tilt angles\n')
   io.stdout:write('--defocus\t\tSet Image Defocus\n')
   io.stdout:write('--expTime\t\tSet Exposure Time\n')
   io.stdout:write('--tiltAxis\t\tSet tilt axis offset rotation angle\n')
   io.stdout:write('--pixSize\t\tSet Image Pixel Size\n')
   io.stdout:write('--mag\t\t\tSet Image Magnification\n')
   io.stdout:write('--ht\t\t\tSet High Tension Voltage\n')
   io.stdout:write('--binning\t\tSet Image Binning\n')
   io.stdout:write('--appDefocus\t\tSet Applied Defocus\n')
   return 0
else
   MRCIOLib.setHeader(arg[1], arg[2], Opts)
end
