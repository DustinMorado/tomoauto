#!/usr/bin/env lua
--[[===========================================================================#
#                            align_dose_fractioned                             #
#------------------------------------------------------------------------------#
# This is a program to align dose-fractioned images and produce a sum. It uses #
# IMOD to align the stack, and is modified from a script by Chen Xu. This is   #
# useful when dosefgpu_driftcorr fails to align a stack.                       #
#------------------------------------------------------------------------------#
# Author:  Dustin Morado                                                       #
# Written: May 19th 2014                                                       #
# Contact: Dustin.Morado@uth.tmc.edu                                           #
#------------------------------------------------------------------------------#
# Arguments: input_filename <string>                                           #
#===========================================================================--]]
local io, os, string = io, os, string
local struct = require 'struct'

-- xfalign options
local reduce_by_binning = 2
local pre_filter_option = '0.01 0.02 0 0.3'

-- xftoxg options
local number_to_fit = 0

-- newstack options
local mode_to_output  = 2
local float_densities = 2

local function write_xfalign(input_filename)
   local command_filename  = 'xfalign.com'
   local basename          = input_filename:sub(1, -5)
   local command_file      = assert(io.open(command_filename, 'w'))
   command_file:write(string.format('$xfalign -StandardInput\n'))
   command_file:write(string.format(
      'InputImageFile %s\n',
      input_filename
   ))
   command_file:write(string.format(
      'OutputTransformFile %s.xf\n',
      basename
   ))
   command_file:write(string.format(
      'ReduceByBinning %s\n',
      reduce_by_binning
   ))
   command_file:write(string.format('PreCrossCorrelation\n'))
   command_file:write(string.format(
      'XcorrFilter %s\n',
      pre_filter_option
   ))
   command_file:close()
end

local function write_xftoxg(input_filename)
   local command_filename  = 'xftoxg.com'
   local basename          = input_filename:sub(1, -5)
   local command_file      = assert(io.open(command_filename, 'w'))
   command_file:write(string.format('$xftoxg -StandardInput\n'))
   command_file:write(string.format(
      'InputFile %s.xf\n',
      basename
   ))
   command_file:write(string.format(
      'GOutputFile %s.xg\n',
      basename
   ))
   command_file:write(string.format(
      'NumberToFit %s\n',
      number_to_fit
   ))
   command_file:close()
end

local function write_newstack(input_fiilename)
   local command_filename  = 'newstack.com'
   local basename          = input_filename:sub(1, -5)
   local command_file      = assert(io.open(command_filename, 'w'))
   command_file:write(string.format('$newstack -StandardInput\n'))
   command_file:write(string.format(
      'InputFile %s\n',
      input_filename
   ))
   command_file:write(string.format(
      'OutputFile %s.ali\n',
      basename
   ))
   command_file:write(string.format(
      'TransformFile %s.xg\n',
      basename
   ))
   command_file:write(string.format(
      'ModeToOutput %s\n',
      mode_to_output
   ))
   command_file:write(string.format(
      'FloatDensities %s\n',
      float_densities
   ))
   command_file:close()
end

local function run(program, basename)
   local sucess, exit, signal = os.execute(
      string.format(
         '%s 1>> align_dose_fractioned_%s.log \z
             2>> align_dose_fractioned_%s.err.log',
         program,
         basename,
         basename
      )
   )
   if (not success) or (signal ~= 0) then
      error(
         string.format(
            '\nError: %s failed for %s.\n\n',
            program,
            basename
         ), 0
      )
   else
      return true
   end
end

function align_dose_fractioned(input_filename)
   local basename  = input_filename:sub(1, -5)
   write_xfalign(input_filename)
   write_xftoxg(input_filename)
   write_newstack(input_filename)
   run(
      'submfg -s -t xfalign.com xftoxg.com newstack.com',
      basename
   )
   run(
      string.format(
         'xyzproj -axis Y %s.ali %s_driftcorr.mrc',
         basename,
         basename
      ),
      basename
   )
   run(
      string.format(
         'rm *.com *.log *.xf *.xg %s.ali',
         basename
      ),
      basename
   )
end

local status, err = pcall(
   align_dose_fractioned,
   arg[1]
)
if not status then
   io.stderr:write(err)
   os.exit(1)
else
   os.exit(0)
end
