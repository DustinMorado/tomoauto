#!/usr/bin/env lua
--[[===========================================================================#
#                            generate_command_files                            #
#------------------------------------------------------------------------------#
# This is a program that generates all of the COM files used by tomoAuto, with #
# the benefit of being able to run manually, to tweak and check individual     #
# steps with tomoAuto.                                                         #
#------------------------------------------------------------------------------#
# Author:  Dustin Morado                                                       #
# Written: May 13th 2014                                                       #
# Contact: Dustin.Morado@uth.tmc.edu                                           #
#------------------------------------------------------------------------------#
# Arguments: input_filaname:    Image stack filename <string>                  #
#            fiducial_diameter: Fiducial size in nanometers <integer>          #
#            options_table:     Table with option flags from yago <table>      #
#===========================================================================--]]
local tomoauto_directory = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoauto_directory .. '/lib/?.lua;'
local COM_file_writer = require 'COM_file_writer'
local yago            = require 'yago'
local MRC_IO_lib      = require 'MRC_IO_lib'
local lfs, os, string = lfs, os, string

function generate_command_files(
   input_filename,
   fiducial_diameter,
   options_table
)

   local header = MRC_IO_lib.get_required_header(
      input_filename,
      fiducial_diameter
   )

   if options_table.c then
      if options_table.d_ then
         header.defocus = options_table.d_
      else
         error('Error; You need to enter an approximate defocus to run \z
                with CTF correction.\n', 0
         )
      end
   end

   local basename = string.sub(input_filename, 1, -4)
   local command_file_directory = basename .. '_COMs'

   assert(
      lfs.mkdir(command_file_directory),
      '\n\nError: Could not make COMs directory.\n'
   )
   assert(
      os.execute(
         string.format(
            'mv %s %s',
            input_filename,
            command_file_directory
         )
      ),
      '\n\nError: Could not move input file to basename directory.\n'
   )
   assert(
      lfs.chdir(command_file_directory),
      '\n\nError: Could not change to basename directory.\n'
   )

   local status, err = pcall(
      COM_file_writer,
      input_filename,
      header,
      options_table
   )
   if not status then
      io.stderr:write(err)
      assert(
         os.execute(
            string.format(
               'mv %s ..', 
               input_filename
            )
         ),
         '\n\nError: Could not move input file to parent directory.\n'
      )
      assert(
         lfs.chdir('..'),
         '\n\nError: Could not change to parent directory.\n'
      )
      assert(
         os.execute(
            string.format(
               'rm -rf  %s', 
               command_file_directory
            )
         ),
         '\n\nError: Could not remove basename directory.\n'
      )
      return nil
   else
      return true
   end
end

local short_options = 'c,   d_,       g,   h,    i_,   l_,    '
local long_options  = 'ctf, defoucus, gpu, help, iter, config '
short_options = short_options .. 'p_,      s,    t,      z_'
long_options  = long_options  .. 'procnum, SIRT, tomo3d, thickness'
local status, arg, options_table = pcall(
   yago.get_options,
   arg,
   short_options,
   long_options
)
if not status then
   local err = arg
   io.stderr:write(err)
   return 1
end
generate_command_files(arg[1], arg[2], options_table)
