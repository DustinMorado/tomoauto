#!/usr/bin/env lua
--- Generates IMOD command files for tilt-series alignment and reconstruction
--
-- This is a program that writes the IMOD command files used by tomoauto so that
-- the process of reconstruction can be stepped through at the command line.
--
-- Dependencies: `COM_file_lib`, `yago`, `MRC_IO_lib`
--
-- @script generate_command_files
-- @author Dustin Morado
-- @license GPLv3
-- @release 0.2.10

local tomoauto_directory = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoauto_directory .. '/lib/?.lua;'

local COM_file_lib    = require 'COM_file_lib'
local yago            = require 'yago'
local MRC_IO_lib      = require 'MRC_IO_lib'
local lfs, os, string = lfs, os, string

--- Generates IMOD command files.
-- writes IMOD command files to process, align and reconstruct a tilt-series
-- @param input_filename tilt-series filename e.g. 'image.st'
-- @param fiducial_diameter size of fiducial markers in nm e.g '10'
-- @param options_table table object with option flags from yago
function generate_command_files(input_filename, fiducial_diameter, 
   options_table)
   if not input_filename then
      error('\nError: No input file entered.\n\n', 0)
   elseif not fiducial_diameter then
      error('\nError: No fiducial size entered.\n\n', 0)
   end

   local basename = string.sub(input_filename, 1, -4)
   local header = MRC_IO_lib.get_required_header(input_filename, 
      fiducial_diameter)

   if options_table.c then
      if options_table.d_ then
         header.defocus = options_table.d_
      else
         error('Error; You need to enter an approximate defocus to run' .. 
               'with CTF correction.\n', 0)
      end
   end

   if options_table.m_ == 'reconstruct' then
      COM_file_lib.write_reconstruction(input_filename, header, options_table)
   else
      COM_file_lib.write(input_filename, header, options_table)
   end
end

if not arg[1] then
   print('\nUsage: generate_command_files [options] <input.st> <fidsize>\n\n')
   os.exit(0)
end

local short_options = 'c,   d_,       g,   h,    i_,   l_,     '
local long_options  = 'ctf, defoucus, gpu, help, iter, config, '
short_options = short_options .. 'm_,   p_,      r,      s,    t,      '
long_options  = long_options  .. 'mode, procnum, RAPTOR, SIRT, tomo3d, '
short_options = short_options .. 'z_'
long_options  = long_options  .. 'thickness'

local status, arg, options_table = pcall(yago.get_options, arg, short_options,
   long_options)
if not status then
   local err = arg
   io.stderr:write(err)
   os.exit(1)
end

status, err = pcall(generate_command_files, arg[1], arg[2], options_table)
if not status then
   io.stderr:write(err)
   os.exit(1)
else
   os.exit(0)
end
