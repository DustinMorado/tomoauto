#!/usr/bin/env lua
local tomoAutoDir = os.getenv('TOMOAUTOROOT')
package.path = package.path .. ';' .. tomoAutoDir .. '/lib/?.lua;'
local MRCIOLib = require 'MRCIOLib'
local yago     = require 'yago'
local io       = io
local function printExtHeader(filename)
   local sString  = 'a,    b,   c,     d,   e,   E,    h,    H,  i,   m,    '
   local lString  = 'aDef, bin, coord, def, exp, dose, help, ht, int, mean, '
   sString = sString .. 'M,   p,   t,   T,     s,   S'
   lString = lString .. 'mag, pix, tlt, tltAx, stg, shft'
   local status, arg, Opts = pcall(yago.getOpt, arg, sString, lString)
   if not status then
      local err = arg
      io.stderr:write(err)
      return 1
   end
   local ref             = ''
   local refName         = ''
   local header          = MRCIOLib.getHeader(filename)
   local extended_header = MRCIOLib.getExtendedHeader(filename)
   if Opts.a then
      ref      = 'appliedDefocus'
      refName  = 'Applied Defocus'
   elseif Opts.b then
      ref      = 'binning'
      refName  = 'Binning'
   elseif Opts.c then
      ref      = 'mon'
      refName  = 'Montage Coordinates'
   elseif Opts.d then
      ref      = 'defocus'
      refName  = 'Defocus'
   elseif Opts.e then
      ref      = 'exp_time'
      refName  = 'Exposure Time'
   elseif Opts.h then
      io.stdout:write('\nUsage: readExtHeader [OPTION..] MRC file\n\n')
      io.stdout:write('-a, --aDef \t\tprint applied defoci (approximate)\n')
      io.stdout:write('-b, --bin  \t\tprint applied binning\n')
      io.stdout:write('-c, --coord\t\tprint stage coordinates\n')
      io.stdout:write('-d, --def  \t\tprint defoci (approximate)\n')
      io.stdout:write('-e, --exp  \t\tprint exposure times (approximate)\n')
      io.stdout:write('-E, --dose \t\tprint exposure doses (approximate)\n')
      io.stdout:write('-h, --help \t\tprint this help and then exit\n')
      io.stdout:write('-H, --ht   \t\tprint screen high tension\n')
      io.stdout:write('-i, --int  \t\tprint intensities\n')
      io.stdout:write('-m, --mean \t\tprint mean values\n')
      io.stdout:write('-M, --Mag  \t\tprint magnifications\n')
      io.stdout:write('-p, --pix  \t\tprint pixel size\n')
      io.stdout:write('-t, --tlt  \t\tprint tilt angles\n')
      io.stdout:write('-T, --tltAx\t\tprint tilt axis offsets\n')
      io.stdout:write('-s, --stg  \t\tprint stage coordinates\n')
      io.stdout:write('-S, --shift\t\tprint image shifts\n')
      return 0
   elseif Opts.H then
      ref      = 'ht'
      refName  = 'High Tension'
   elseif Opts.i then
      ref      = 'int'
      refName  = 'Intensity'
   elseif Opts.m then
      ref      = 'mean_int'
      refName  = 'Mean integers'
   elseif Opts.M then
      ref      = 'magnification'
      refName  = 'Magnification'
   elseif Opts.p then
      ref      = 'pixel_size'
      refName  = 'Pixel Size'
   elseif Opts.t then
      ref      = 'a_tilt'
      refName  = 'Tilt Angles'
   elseif Opts.T then
      ref      = 'tilt_axis'
      refName  = 'Tilt Axis Offset'
   elseif Opts.s then
      ref      = 'x_stage'
      refName  = 'Stage position'
   elseif Opts.S then
      ref      = 'x_shift'
      refName  = 'Image Shift'
   else
      ref      = 'a_tilt'
      refName  = 'Tilt Angles'
   end
   io.stdout:write(string.format(
      '\n\nInput Filename ....................\t%s\n\n', filename))
   for i = 1, header.nz do
      if ref == 'pixel_size' then
         if extended_header[i][ref] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%5.4e\n',
                i, refName, extended_header[i][ref]))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n', refName))
            return 1
         end
      elseif ref == 'a_tilt' and extended_header[i].b_tilt then
         if extended_header[i][ref] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%05.2f\t%05.2f\n',
                i, refName, extended_header[i][ref], extended_header[i].b_tilt))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n', refName))
            return 1
         end
      elseif ref == 'x_stage' then
         if extended_header[i][ref] then
            io.stdout:write(string.format(
               '%03d %s : \z
                ....................\t%05.2f\t%05.2f\t%05.2f\n',
                i, refName, extended_header[i][ref], extended_header[i].y_stage,
                extended_header[i].z_stage))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n', refName))
            return 1
         end
      elseif ref == 'x_shift' then
         if extended_header[i][ref] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%05.2f\t%05.2f\n',
                i, refName, extended_header[i][ref],
                extended_header[i].y_shift))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n', refName))
            return 1
         end
      else
         if extended_header[i][ref] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t% 06.2f\n',
                i, refName, extended_header[i][ref]))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n', refName))
            return 1
         end
      end
   end
   return 0
end
printExtHeader(arg[1])
