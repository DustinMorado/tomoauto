#!/usr/bin/env lua
--[[===========================================================================#
#                             print_extended_header                            #
#------------------------------------------------------------------------------#
# This is a program to print information in the extended header to the screen  #
# it is similar to extracttilts in IMOD, but also displays the information in  #
# the extended header of Agard style MRC headers.                              #
#------------------------------------------------------------------------------#
# Author:   Dustin Morado                                                      #
# Written:  May 23rd 2014                                                      #
# Contact:  Dustin.Morado@uth.tmc.edu                                          #
#------------------------------------------------------------------------------#
# Arguments: arg[1]: Image stack filename <string>                             #
#            arg[2]: Options table as produced by yago                         #
#===========================================================================--]]
local tomoauto_directory = os.getenv('TOMOAUTOROOT')
package.path     = package.path .. ';' .. tomoauto_directory .. '/lib/?.lua;'
local MRC_IO_lib = require 'MRC_IO_lib'
local yago       = require 'yago'
local io         = io

local function print_extended_header(filename, options_table)
   if options_table.h then
      io.stdout:write('\nUsage: readExtHeader [OPTION..] MRC file\n\n')
      io.stdout:write('-a, --aDef \t\tprint applied defoci (approximate)\n')
      io.stdout:write('-b, --bin  \t\tprint applied binning\n')
      io.stdout:write('-c, --coord\t\tprint stage coordinates\n')
      io.stdout:write('-d, --def  \t\tprint defoci (approximate)\n')
      io.stdout:write('-e, --exp  \t\tprint exposure times (approximate)\n')
      io.stdout:write('-E, --dose \t\tprint exposure doses (approximate)\n')
      io.stdout:write('-h, --help \t\tprint this help and then exit\n')
      io.stdout:write('-H, --ht   \t\tprint screen high tension\n')
      io.stdout:write('-i, --int  \t\tprint intensities\n')
      io.stdout:write('-m, --mean \t\tprint mean values\n')
      io.stdout:write('-M, --Mag  \t\tprint magnifications\n')
      io.stdout:write('-p, --pix  \t\tprint pixel size\n')
      io.stdout:write('-t, --tlt  \t\tprint tilt angles\n')
      io.stdout:write('-T, --tltAx\t\tprint tilt axis offsets\n')
      io.stdout:write('-s, --stg  \t\tprint stage coordinates\n')
      io.stdout:write('-S, --shift\t\tprint image shifts\n')
      return 0
   end

   local reference       = ''
   local reference_name  = ''
   local header          = MRC_IO_lib.get_header(filename)
   local extended_header = MRC_IO_lib.get_extended_header(filename)

   if options_table.a then
      reference      = 'appliedDefocus'
      reference_name = 'Applied Defocus'
   elseif options_table.b then
      reference      = 'binning'
      reference_name = 'Binning'
   elseif options_table.c then
      reference      = 'mon'
      reference_name = 'Montage Coordinates'
   elseif options_table.d then
      reference      = 'defocus'
      reference_name = 'Defocus'
   elseif options_table.e then
      reference      = 'exp_time'
      reference_name = 'Exposure Time'
   elseif options_table.E then
      reference      = 'exp_dose'
      reference_name = 'Exposure Dose'
   elseif options_table.H then
      reference      = 'ht'
      reference_name = 'High Tension'
   elseif options_table.i then
      reference      = 'int'
      reference_name = 'Intensity'
   elseif options_table.m then
      reference      = 'mean_int'
      reference_name = 'Mean integers'
   elseif options_table.M then
      reference      = 'magnification'
      reference_name = 'Magnification'
   elseif options_table.p then
      reference      = 'pixel_size'
      reference_name = 'Pixel Size'
   elseif options_table.t then
      reference      = 'a_tilt'
      reference_name = 'Tilt Angles'
   elseif options_table.T then
      reference      = 'tilt_axis'
      reference_name = 'Tilt Axis Offset'
   elseif options_table.s then
      reference      = 'x_stage'
      reference_name = 'Stage position'
   elseif options_table.S then
      reference      = 'x_shift'
      reference_name = 'Image Shift'
   else
      reference      = 'a_tilt'
      reference_name = 'Tilt Angles'
   end

   io.stdout:write(string.format(
      '\n\nInput Filename ....................\t%s\n\n',
      filename
   ))

   for i = 1, header.nz do
      if reference == 'pixel_size' then
         if extended_header[i][reference] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%5.4e\n',
               i,
               reference_name,
               extended_header[i][reference]
            ))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n',
               reference_name
            ))
            return 1
         end
      elseif reference == 'a_tilt' and extended_header[i].b_tilt then
         if extended_header[i][reference] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%05.2f\t%05.2f\n',
               i,
               reference_name,
               extended_header[i][reference],
               extended_header[i].b_tilt
            ))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n',
               reference_name
            ))
            return 1
         end
      elseif reference == 'x_stage' then
         if extended_header[i][reference] then
            io.stdout:write(string.format(
               '%03d %s : \z....................\t%05.2f\t%05.2f\t%05.2f\n',
               i,
               reference_name,
               extended_header[i][reference],
               extended_header[i].y_stage,
               extended_header[i].z_stage
            ))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n',
               reference_name
            ))
            return 1
         end
      elseif reference == 'x_shift' then
         if extended_header[i][reference] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t%05.2f\t%05.2f\n',
               i,
               reference_name,
               extended_header[i][reference],
               extended_header[i].y_shift
            ))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n',
               reference_name
            ))
            return 1
         end
      else
         if extended_header[i][reference] then
            io.stdout:write(string.format(
               '%03d %s : ....................\t% 06.2f\n',
               i,
               reference_name,
               extended_header[i][reference]
            ))
         else
            io.stderr:write(string.format(
               'No %s found in the extended header.\n\n',
               reference_name
            ))
            return 1
         end
      end
   end
   return 0
end

local short_options  = 'a,    b,   c,     d,   e,   E,    h,    H,  i,   m,    '
local long_options   = 'aDef, bin, coord, def, exp, dose, help, ht, int, mean, '

short_options = short_options .. 'M,   p,   t,   T,     s,   S'
long_options  = long_options  .. 'mag, pix, tlt, tltAx, stg, shft'

local status, arg, options_table = pcall(
   yago.getOpt,
   arg,
   short_options,
   long_options
)

if not status then
   local err = arg
   io.stderr:write(err)
   os.exit(1)
end

local filename = arg[1]
print_extended_header(filename, options_table)
