#!/usr/bin/env lua
local tomoAutoDir = os.getenv('TOMOAUTOROOT')
package.cpath = package.cpath .. ';' .. tomoAutoDir .. '/lib/?.so;'
package.path = package.path .. ';' .. tomoAutoDir .. '/lib/?.lua;'
local io, os, string, table = io, os, string, table
local lfs = require 'lfs'
local globalConfig = assert(require 'globalConfig')

local function writeCCDEraserCom(inputFile)
   local comName = 'ccderaser.com'
   local filename = inputFile:sub(1, -5)
   local file = assert(io.open(comName, 'w'))
   file:write('$ccderaser -StandardInput\n')
   file:write('InputFile ' .. inputFile .. '\n')
   file:write('OutputFile ' .. inputFile .. '_fixed\n')
   file:write('PointModel ' .. filename .. '_peak.mod\n')
   file:write('FindPeaks\n')
   file:write('PeakCriterion ' .. ccderaserPeakCriterion .. '\n')
   file:write('DiffCriterion ' .. ccderaserDiffCriterion .. '\n')
   file:write('GrowCriterion ' .. ccderaserGrowCriterion .. '\n')

   file:write('ScanCriterion ' .. ccderaserScanCriterion .. '\n')
   file:write('MaximumRadius ' .. ccderaserMaximumRadius .. '\n')
   file:write('AnnulusWidth ' .. ccderaserAnnulusWidth .. '\n')
   file:write('XYScanSize ' .. ccderaserXYScanSize .. '\n')
   file:write('EdgeExclusionWidth ' .. ccderaserEdgeExclusionWidth .. '\n')
   file:write('BorderSize ' .. ccderaserBorderSize .. '\n')
   file:write('PolynomialOrder ' .. ccderaserPolynomialOrder .. '\n')
   file:close()
end

for file in lfs.dir('.') do
   if file:match('.+%.mrc$') then
      local inputFile = file:match('.+%.mrc$')
      local filename = inputFile:sub(1, -5)
      ---[[
      writeCCDEraserCom(inputFile)
      assert(os.execute('submfg -s -t ccderaser.com &> /dev/null'),
             '\nError running ccderaser, check logfile.\n')
      assert(os.execute('rm ccderaser.com ' .. filename .. '_peak.mod'),
             '\nError removing files.\n')
      --]]
      --[[
      print(inputFile)
      print(inputFile:sub(1,-5))
      --]]
   end
end
