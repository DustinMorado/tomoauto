#!/usr/bin/env lua
--- Automatically processes, aligns, and reconstructs tilt series.
--
-- This program uses IMOD, RAPTOR and TOMO3D to automatically handle the
-- processing of collected tilt-series. It can erase CCD pixel peaks, align tilt
-- series, perform CTF correction and reconstruct a tomogram using WBP or SIRT
-- methods.
--
-- Dependencies: `tomoauto_lib`, `yago`
--
-- @script tomoauto
-- @author Dustin Morado
-- @license GPLv3
-- @release 0.2.10

local tomoauto_directory = os.getenv('TOMOAUTOROOT')
package.path   = package.path .. ';' .. tomoauto_directory .. '/lib/?.lua;'

local tomoauto_lib = require 'tomoauto_lib'
local yago         = require 'yago'

if not arg[1] or not arg[2] then
   io.write('\nUsage: tomoauto [options] <image.st> <fidsize>\n' ..
      'Automates the alignment of tilt series and the reconstruction of\n' ..
      'these series into 3D tomograms.\n\n' ..
      '-c, --CTF      \tApplies CTF correction to the aligned stack\n' ..
      '-d, --defocus  \tUses this as estimated defocus for ctfplotter\n' ..
      '-g, --GPU      \tUses GPGPU methods to speed up the reconstruction\n' ..
      '-h, --help     \tPrints this information and exits\n' ..
      '-i, --iter     \tThe number of SIRT iterations to run [default 30]\n' ..
      '-l, --config   \tSources a local config file\n' ..
      '-m, --mode     \tSelect which mode you want to operate\n' ..
      '\t\tavailable modes (align, reconstruct).\n' ..  
      '-p, --procnum  \tUses <int> processors to speed up tilt\n' ..
      '-r, --RAPTOR   \tUses RAPTOR instead of autofidseed\n' ..
      '-s, --SIRT     \tUse SIRT to reconstruct [default WBP]\n' ..
      '-t, --tomo3d   \tUse the TOMO3D to compute reconstruction\n' ..
      '-z, --thickness\tCreate a tomogram with <int> thickness\n')
   os.exit(0)
end

local short_options  = 'c,   d_,      g,   h,    i_,   l_,     m_, '
local long_options   = 'ctf, defocus, gpu, help, iter, config, mode, '
short_options  = short_options .. 'p_,      r,      s,    t,      z_'
long_options   = long_options  .. 'procnum, RAPTOR, SIRT, tomo3D, thickness'

local status, arg, options_table = pcall(yago.get_options, arg, short_options,
   long_options)
if not status then
   local err = arg
   io.stderr:write(err)
   os.exit(1)
end

local status, err = pcall(tomoauto_lib.process, arg[1], arg[2], options_table)
if not status then
   io.stderr:write(err)
   tomoauto_lib.clean_up(arg[1], options_table)
   os.exit(1)
else
   os.exit(0)
end
